<?php

namespace CustomerBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrderrRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * 
     * @return type
     */
    public function getOrders() /* 
     this function lists the orders as an array for the 
     the customer object (With the customer object when it loads*/
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id,'
                . 'ord.createdTime as orderDate,'
                . 'c.id as cid,'
                . 'c.firstName as customerFname,'
                . 'c.lastName as customerLname'
                )
            ->join('ord.customer', 'c')
            ->where('ord.deleted = false');
        
        return $qb->getQuery()->getScalarResult();
    }
    
    /**
     * 
     * @return type
     */
    public function getOrder($id, $loadAss = true)
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id'
                )
            ->where('ord.id = :id')
            ->setParameter('id', $id);
        
        $order = $qb->getQuery()->getSingleResult();
        
        // if you only need to get the id and orderDate of an order then simply 
        // set $loadAss as false.
        if($loadAss) { 
            $qb = $this->createQueryBuilder('ord')
                ->select(
                      'ord.id as oid,'
                    . 'ord.createdTime as orderDate,'
                    . 'c.id as cid,'
                    . 'c.firstName as customerFname,'
                    . 'c.lastName as customerLname'
                    )
                ->join('ord.customer', 'c')  
                ->where('ord.id = :id')
                ->setParameter('id', $id);
            
            $order = $qb->getQuery()->getSingleResult();
        
            // generate shipping array for this order object
            $qb = $this->createQueryBuilder('ord')
                ->select(
                      'shipAd.street, '
                    . 'shipAd.city, '
                    . 'shipAd.state,'
                    . 'shipAd.zip,'
                    . 'shipAd.country'
                    )
                ->join('ord.shippingAddress', 'shipAd')
                ->where('ord.deleted = false AND shipAd.deleted = false AND ord.id = :id')
                ->setParameter('id', $id);

            $shipping = $qb->getQuery()->getOneOrNullResult();  
            //SingleResult gives you an object, ScalarResult gives you an array of objects

            $order['shipping'] = $shipping;

            //generate billing array for this order object
            $qb = $this->createQueryBuilder('ord')
                ->select(
                      'billAd.street, '
                    . 'billAd.city, '
                    . 'billAd.state,'
                    . 'billAd.zip,'
                    . 'billAd.country'
                    )
                ->join('ord.billingAddress', 'billAd')
                ->where('ord.deleted = false AND billAd.deleted = false AND ord.id = :id')
                ->setParameter('id', $id);

            $billing = $qb->getQuery()->getOneOrNullResult();  //SingleResult gives you an object, ScalarResult gives you an array of objects

            $order['billing'] = $billing;
            
            //this part queries for the order's details:
            $qb = $this->createQueryBuilder('ord')
                ->select(
                      'od.comment,'
                    . 'od.quantity,'
                    . 'p.id as pid,'
                    . 'p.name as productName'
                    )
                ->join('ord.orderDetails', 'od')
                ->join('od.product', 'p')
                ->where('ord.deleted = false AND ord.id = :id') 
                ->setParameter('id', $id);
            
            $orderDetails = $qb->getQuery()->getScalarResult(); 
            
            $order['orderDetails'] = $orderDetails;
                }
        
                
        return $order;
    }    
    
    /**
     * 
     * @return type
     */
    public function getCustomerOrders($id) /* 
     this function lists the orders for a customer id that is given to it
     how it differs from the getOrders is we use this one for when we need to 
     to list the orders after the admin has deleted an order from the list*/
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id,'
                . 'ord.status, '
                . 'ord.createdTime as orderDate '
                )
            ->join('ord.customer', 'cus')
            ->where('ord.deleted = false AND cus.id = :id')
            ->setParameter('id', $id);
        
        return $qb->getQuery()->getScalarResult();
    }
    
 
}
