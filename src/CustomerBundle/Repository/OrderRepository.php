<?php

namespace CustomerBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrderrRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * 
     * @return type
     */
    public function getOrders() /* 
     this function lists the orders as an array for the 
     the customer object (With the customer object when it loads*/
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id,'
                . 'ord.createdTime as orderDate,'
                . 'c.id as cid'
                
                )
            ->join('ord.orderDetails', 'od')
            ->join('od.product', 'p')
            ->join('ord.customer', 'c')
            ->join('ord.shippingAddress', 'a')
            ->where('ord.deleted = false');
        
        return $qb->getQuery()->getScalarResult();
    }
    
     /**
     * 
     * @return type
     */
    public function getOrder($id)
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id'
                )
            ->where('ord.id = :id')
            ->setParameter('id', $id);
        
        $order = $qb->getQuery()->getSingleResult();
        
        return $order;
    }    
    
    /**
     * 
     * @return type
     */
    public function getCustomerOrders($id) /* 
     this function lists the orders for a customer id that is given to it
     how it differs from the getOrders is we use this one for when we need to 
     to list the orders after the admin has deleted an order from the list*/
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id,'
                . 'ord.status, '
                . 'ord.createdTime as orderDate '
                )
            ->join('ord.customer', 'cus')
            ->where('ord.deleted = false AND cus.id = :id')
            ->setParameter('id', $id);
        
        return $qb->getQuery()->getScalarResult();
    }
    

    /**
     * 
     * @return type
     */
    public function getOrderDetails($id)
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id,'
                . 'a.street,'
                . 'a.city,'
                . 'a.state,'
                . 'a.zip,'
                . 'a.country,'
                . 'od.quantity,'
                . 'od.comment,'
                . 'p.id as pid,'
                . 'p.name as productName'
                )
            ->join('ord.orderDetails', 'od')
            ->join('od.product', 'p')
            ->join('ord.shippingAddress', 'a')
            ->where('ord.deleted = false AND od.deleted = false AND ord.id = :id')
            ->setParameter('id', $id);
        
        return $qb->getQuery()->getScalarResult();

    }   
    
 
}
