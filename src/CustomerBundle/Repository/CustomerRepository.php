<?php

namespace CustomerBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CustomerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerRepository extends \Doctrine\ORM\EntityRepository
{
    /**
    *
    * @param type $criteria
    * @return type
    */
    public function getCustomers($criteria = null) 
    {
        $qb = $this->createQueryBuilder('customer')
            ->select(
                'customer.id,'
               .'customer.firstName,'
               .'customer.lastName'
                )
            ->where('customer.deleted = false');

        $customers = $qb->getQuery()->getScalarResult();

        return $customers;
    }
    
    /**
     * 
     * @return type
     */
    public function getCustomer($id)
    {
        $qb = $this->createQueryBuilder('cus')
            ->select(
                  'cus.id, '
                . 'cus.firstName, '
                . 'cus.lastName, '
                . 'cus.email, '
                . 'cus.phoneNumber '
                )
            ->where('cus.id = :id')
            ->setParameter('id', $id);
        
        return $qb->getQuery()->getSingleResult();
    }  
    
    /**
     * 
     * @return type
     */
    public function getCustomerAddress($customerId)
    {
    $address = array();  
    
    // generate shipping array for the address object
    $qb = $this->getEntityManager()
        ->createQueryBuilder('cus')
            ->select(
                  'ad.street, '
                . 'ad.city, '
                . 'ad.state,'
                . 'ad.zip,'
                . 'ad.country'
                )
            ->join('cus.addresses', 'ad')
            ->where('cus.deleted = false AND ad.deleted = false AND cus.id = :customerId AND ad.type = 1')
            ->setParameter('customerId', $customerId);

    $shipping = $qb->getQuery()->getSingleResult(); //SingleResult gives you an object, ScalarResult gives you an array of objects

    $address['shipping'] = $shipping;

    //generate billing array for the address object
    $qb = $this->getEntityManager()
        ->createQueryBuilder('cus')
        ->select(
              'ad.street, '
            . 'ad.city, '
            . 'ad.state,'
            . 'ad.zip,'
            . 'ad.country'
            )
        ->join('cus.addresses', 'ad')
        ->where('cus.deleted = false AND ad.deleted = false AND cus.id = :customerId AND ad.type = 2')
        ->setParameter('customerId', $customerId);

    $billing = $qb->getQuery()->getSingleResult();

    $address['billing'] = $billing;


    return $address;

    } 
    
    
}
