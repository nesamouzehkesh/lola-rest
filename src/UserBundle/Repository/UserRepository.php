<?php

namespace UserBundle\Repository;

use \Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
    /**
    *
    * @param type $criteria
    * @return type
    */
    public function getUsers($criteria = null) 
    {
        $qb = $this->createQueryBuilder('user')
            ->select(
                'user.id,'
               .'user.firstName,'
               .'user.lastName'
                )
            ->where('user.deleted = false');

        $users = $qb->getQuery()->getScalarResult();

        return $users;
    }
    
    /**
     * 
     * @return type
     */
    public function getUser($id)
    {
        $qb = $this->createQueryBuilder('cus')
            ->select(
                  'cus.id, '
                . 'cus.firstName, '
                . 'cus.lastName, '
                . 'cus.email, '
                . 'cus.phoneNumber '
                )
            ->where('cus.id = :id')
            ->setParameter('id', $id);
        
        return $qb->getQuery()->getSingleResult();
    }  
    
    /**
     * 
     * @return type
     */
    public function getUserAddress($userId)
    {
        $address = array();  
        // generate shipping array for the address object
        $qb = $this->createQueryBuilder('cus')
            ->select(
                  'ad.street, '
                . 'ad.city, '
                . 'ad.state,'
                . 'ad.zip,'
                . 'ad.country'
                )
            ->join('cus.addresses', 'ad')
            ->where('cus.deleted = false AND ad.deleted = false AND cus.id = :userId AND ad.type = 1 AND ad.primary = true')
            ->setParameter('userId', $userId);

        //SingleResult gives you an object, ScalarResult gives you an array of objects
        $shipping = $qb->getQuery()->getOneOrNullResult();
        $address['shipping'] = $shipping;

        //generate billing array for the address object
        $qb = $this->createQueryBuilder('cus')
            ->select(
                  'ad.street, '
                . 'ad.city, '
                . 'ad.state,'
                . 'ad.zip,'
                . 'ad.country'
                )
            ->join('cus.addresses', 'ad')
            ->where('cus.deleted = false AND ad.deleted = false AND cus.id = :userId AND ad.type = 2 AND ad.primary = true')
            ->setParameter('userId', $userId);

        $billing = $qb->getQuery()->getOneOrNullResult();
        $address['billing'] = $billing;

        return $address;
    }     
}
