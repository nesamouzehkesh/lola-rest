<?php

namespace ShopBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * BasketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BasketRepository extends EntityRepository
{
    /**
     * we need this function to check on the redundancy of an item in the basket 
     * when posting an item to the basket
     * 
     * @param type $user
     * @param type $product
     * @return type
     */
    public function getBasketItem($user, $product) 
    {
        $qb = $this->createQueryBuilder('basket')
            ->select(
                'basket.id,'
               .'basket.quantity,'
               .'p.name,'
               .'p.id as pId,' 
               .'u.id as uId' 
                )
            ->join('basket.product', 'p')
            ->join('basket.user', 'u')
            ->where('basket.deleted = false AND basket.user = :user AND basket.product = :product')
            ->setParameter('user', $user)
            ->setParameter('product', $product);

        return $qb->getQuery()->getOneOrNullResult();
    }    
    
    /**
     * 
     * @param type $user
     * @param type $isJSON all the items for this customer 
     * @return type
     */
    public function getBasketItems($user, $isJSON = true)
    {
        $select = 'basket';
        if ($isJSON) {
           $select = 'basket.id,'
               .'basket.quantity,'
               .'p.name,'
               .'p.id as pid,' 
               .'u.id as uid';
        }

        $qb = $this->createQueryBuilder('basket')
            ->select($select)
            ->join('basket.product', 'p')
            ->join('basket.user', 'u')
            ->where('basket.deleted = false AND basket.user = :user')
            ->setParameter('user', $user);
        
        if ($isJSON) {
            return $qb->getQuery()->getScalarResult();
        } else {
            return $qb->getQuery()->getResult();
        }
    } 
}
