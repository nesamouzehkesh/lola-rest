<?php

namespace ShopBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrderrRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends EntityRepository
{
    /**
     * this function lists the orders as an array for the the user object 
     * (With the user object when it loads
     * 
     * @return type
     */
    public function getOrders()
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id,'
                . 'ord.createdTime as orderDate,'
                . 'c.id as cid,'
                . 'u.firstName as userFname,'
                . 'u.lastName as userLname'
                )
            ->join('ord.user', 'u')
            ->where('ord.deleted = false');
        
        return $qb->getQuery()->getScalarResult();
    }
    
    /**
     * 
     * @return type
     */
    public function getOrder($id, $loadAss = true)
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id as oid,'
                . 'ord.createdTime as orderDate,'
                . 'u.id as uid,'
                . 'u.firstName as userFname,'
                . 'u.lastName as userLname'
                )
            ->join('ord.user', 'u')  
            ->where('ord.id = :id')
            ->setParameter('id', $id);
        $order = $qb->getQuery()->getSingleResult();
        
        // if you only need to get the id and orderDate of an order then simply 
        // set $loadAss as false.
        if ($loadAss) { 
            // generate shipping array for this order object
            $qb = $this->createQueryBuilder('ord')
                ->select(
                      'shipAd.street, '
                    . 'shipAd.city, '
                    . 'shipAd.state,'
                    . 'shipAd.zip,'
                    . 'shipAd.country'
                    )
                ->join('ord.shippingAddress', 'shipAd')
                ->where('ord.deleted = false AND shipAd.deleted = false AND ord.id = :id')
                ->setParameter('id', $id);

            // SingleResult gives you an object, ScalarResult gives you an array of objects
            $shipping = $qb->getQuery()->getOneOrNullResult();  
            $order['shipping'] = $shipping;

            // generate billing array for this order object
            $qb = $this->createQueryBuilder('ord')
                ->select(
                      'billAd.street, '
                    . 'billAd.city, '
                    . 'billAd.state,'
                    . 'billAd.zip,'
                    . 'billAd.country'
                    )
                ->join('ord.billingAddress', 'billAd')
                ->where('ord.deleted = false AND billAd.deleted = false AND ord.id = :id')
                ->setParameter('id', $id);
            
            // SingleResult gives you an object, ScalarResult gives you an array of objects
            $billing = $qb->getQuery()->getOneOrNullResult();
            $order['billing'] = $billing;
            
            // this part queries for the order's details:
            $qb = $this->createQueryBuilder('ord')
                ->select(
                      'od.comment,'
                    . 'od.quantity,'
                    . 'p.id as pid,'
                    . 'p.name as productName'
                    )
                ->join('ord.orderDetails', 'od')
                ->join('od.product', 'p')
                ->where('ord.deleted = false AND ord.id = :id') 
                ->setParameter('id', $id);
            
            $orderDetails = $qb->getQuery()->getScalarResult(); 
            $order['orderDetails'] = $orderDetails;
        }
                
        return $order;
    }    
    
    /**
     * this function lists the orders for a user id that is given to it how it 
     * differs from the getOrders is we use this one for when we need to list 
     * the orders after the admin has deleted an order from the list
     * 
     * @return type
     */
    public function getShopOrders($userId)
    {
        $qb = $this->createQueryBuilder('ord')
            ->select(
                  'ord.id,'
                . 'ord.status, '
                . 'ord.createdTime as orderDate '
                )
            ->join('ord.user', 'u')
            ->where('ord.deleted = false AND u.userId = :userId')
            ->setParameter('userId', $userId);
        
        return $qb->getQuery()->getScalarResult();
    }
}